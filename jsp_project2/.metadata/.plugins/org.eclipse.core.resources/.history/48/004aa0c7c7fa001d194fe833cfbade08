package controller;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.catalina.connector.Request;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.MemberVO;
import domain.PagingVO;
import handler.FileHandler;
import handler.PagingHandler;
import net.coobird.thumbnailator.Thumbnails;
import service.BoardService;
import service.BoardServiceImpl;

@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = LoggerFactory.getLogger(BoardController.class);
    private RequestDispatcher rdp; 
    private String destPage; // 목적지 주소를 저장해주는 변수
    private int isOk; // db의 결과
    private BoardService bsv; //interface
    
    //파일 경로를 저장할 변수
    private String savePath;
    private final String UTF8 = "utf-8"; //인코딩 설정
	
    public BoardController() {
        bsv = new BoardServiceImpl(); // interface 구현체
    }

	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 캐릭터 인코딩 설정, 컨텐츠 타입 설정
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=utf-8");
		
		String uri = request.getRequestURI();
		log.info(">>> uri" + uri);
		String path = uri.substring(uri.lastIndexOf("/")+1);
		log.info(">>> path" + path);
		
		switch(path) {
		case "register":
			destPage = "/board/register.jsp";
			break;
		
		case "insert":
			try {
				//파일을 업로드할 물리적인 경로를 설정
				savePath = getServletContext().getRealPath("/_fileUpload");
				log.info(">>>> 파일 저장 경로:" + savePath);
				File fileDir = new File(savePath);
				
				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				//파일의 저장위치를 담고 있는 객체를 저장하기
				fileItemFactory.setRepository(fileDir); 
				//파일 저장을 위한 임시 메모리 용량설정: byte단위
				fileItemFactory.setSizeThreshold(2*1024*1024); //2MB
				
				BoardVO bvo = new BoardVO();
				// /multipart/form-data 형식으로 넘어온 request 객체를 다루기 쉽게 변환해주는 역할
				ServletFileUpload fileUpload = new ServletFileUpload(fileItemFactory);
				
				List<FileItem> itemList = fileUpload.parseRequest(request);
				for(FileItem item : itemList) {
					switch(item.getFieldName()) {
					case "title":
						bvo.setTitle(item.getString(UTF8)); //인코딩 형식을 담아서 변환
						break;
					case "writer":
						bvo.setWriter(item.getString(UTF8)); //인코딩 형식을 담아서 변환
						break;
					case "content":
						bvo.setContent(item.getString(UTF8)); //인코딩 형식을 담아서 변환
						break;
					case "image_file":
						//이미지가 있는지 없는지 체크
						if(item.getSize() > 0) { //데이터의 크기를 이용해서 유무결정
							// 경로를 포함한 파일이름 ~~~/dog.jpg
							String fileName = item.getName().substring(item.getName().lastIndexOf("/")+1); 
							fileName = System.currentTimeMillis()+"_"+fileName;
							log.info(">>> fileName: " + fileName);
							File uploadFilePath = new File(fileDir+File.separator+fileName);
							log.info("실제 파일경로: " + uploadFilePath);
							
							//저장
							try {
								item.write(uploadFilePath); // 자바객체를 디스크에 쓰기
								bvo.setImage_file(fileName);
								
								//thubmnail 작업: 리스트 페이지에서 트래픽 과다사용 방지
								Thumbnails.of(uploadFilePath).size(75, 75)
								.toFile(new File(fileDir+File.separator+"th_" + fileName));
								
								
							} catch (Exception e) {
								log.info(">>> file writer on disk fail");
								e.printStackTrace();
							}
						}
						break;
					}
				}
				isOk = bsv.insert(bvo);
				log.info(">>> Insert > " + (isOk > 0 ? "성공" : "실패"));
//				String title = request.getParameter("title");
//				String writer = request.getParameter("writer");
//				String content = request.getParameter("content");
//				BoardVO bvo = new BoardVO(title, writer, content); 
//				
//				isOk = bsv.insert(bvo);
//				log.info(">>> Insert > " + (isOk > 0 ? "성공" : "실패"));
			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "page";
			break;
			
			
			
		case "list":
			try {
				List<BoardVO> list = bsv.list();
				request.setAttribute("list", list);
				
				log.info(">>> list 출력 > " + (isOk > 0 ? "성공" : "실패"));
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "/board/list.jsp";
			break;	
			
		case "page":
			try {
				
				int pageNo = 1;
				int qty = 10;
				String type = "";
				String keyword = "";
				if(request.getParameter("type") != null) {
					type = request.getParameter("type");
					keyword = request.getParameter("keyword");
					log.info(">>>> type > " + type + ">>>> keyword >" +keyword);
				}
				if(request.getParameter("pageNo") != null) {
					pageNo = Integer.parseInt(request.getParameter("pageNo"));
					qty = Integer.parseInt(request.getParameter("qty"));
				}
				PagingVO pgvo = new PagingVO(pageNo, qty);
				pgvo.setType(type);
				pgvo.setKeyword(keyword);			
				
				//전체 페이지 개수
				int totCount = bsv.getTotal(pgvo); 
				log.info("전페 페이지 개수: " + totCount);
				//limit를 이용한 select List를 호출
				//한페이지에 나와야하는 리스트
				List<BoardVO> list = bsv.getPageList(pgvo);
				log.info(">>> list: " + list.size());
				PagingHandler ph = new PagingHandler(pgvo, totCount);
				request.setAttribute("pgh", ph);
				request.setAttribute("list", list);
				log.info("pageList 성공");
				destPage = "/board/list.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "detail":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				BoardVO b = new BoardVO();			
				b = bsv.detail(bno);
				request.setAttribute("bvo", b);
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "/board/detail.jsp";
			break;	
			
		case "modify":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				BoardVO b = new BoardVO();
				b = bsv.modify(bno);
				request.setAttribute("bvo", b);
			} catch (Exception e) {
				e.printStackTrace();
			}
			destPage = "/board/modify.jsp";
			break;	
			
		case "edit":
			try {
				savePath = getServletContext().getRealPath("/_fileUpload");
				File fileDir = new File(savePath);
				
				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				fileItemFactory.setRepository(fileDir);
				fileItemFactory.setSizeThreshold(2*1024*1024);
				
				BoardVO bvo = new BoardVO();
				
				ServletFileUpload fileUpload = new ServletFileUpload(fileItemFactory);
				log.info(">>> update 준비");
				
				List<FileItem> itemList = fileUpload.parseRequest(request);
				
				String old_file = null;
				for(FileItem item : itemList) {
					switch(item.getFieldName()) {
					case "bno":
						bvo.setBno(Integer.parseInt(item.getString(UTF8)));
						break;
					case "title":
						bvo.setTitle(item.getString(UTF8));
						break;
					case "content":
						bvo.setContent(item.getString(UTF8));
						break;
					case "image_file":
						old_file = item.getString(UTF8);
						break;
					case "new_file":
						if(item.getSize() > 0) { //새로운 파일이 등록됨
							if(old_file != null) {		
								//파일 핸들러 호출 (기존 파일을 삭제)
								FileHandler fileHandler = new FileHandler();
								isOk = fileHandler.deleteFile(old_file, savePath);
							}
							//이름 설정 ---------/dog.jpg
							String fileName = item.getName()
									.substring(item.getName().lastIndexOf(File.separator)+1);
							log.info(">>> new_fileName: " + fileName);
							//실제저장이름
							fileName = System.currentTimeMillis()+"_"+fileName;
							File uploadFilePath = new File(fileDir + File.separator+fileName);
							try {
								item.write(uploadFilePath);
							} catch (Exception e2) {
								log.info(">>> file update on disk fail");
								e2.printStackTrace();
							}
						}
						break;
					}
				}
				
//				int bno = Integer.parseInt(request.getParameter("bno")) ;
//				String title = request.getParameter("title");
//				String content = request.getParameter("content");
//				BoardVO bvo = new BoardVO(bno, title, content);
				
//				isOk = bsv.edit(bvo);
				log.info(">>> edit > " + (isOk > 0 ? "성공" : "실패"));
			} catch (Exception e) {
				// TODO: handle exception
			}
			destPage = "/brd/list";
			break;	
			
		case "remove":
			try {
				int bno = Integer.parseInt(request.getParameter("bno")) ;
				String title = request.getParameter("title");
				String content = request.getParameter("content");
				BoardVO bvo = new BoardVO(bno, title, content);
				
				isOk = bsv.delete(bvo);
				log.info(">>> delete > " + (isOk > 0 ? "성공" : "실패"));
			} catch (Exception e) {
				// TODO: handle exception
			}
			destPage = "/brd/list";
			break;	
		
		}	
		
		rdp = request.getRequestDispatcher(destPage);
		rdp.forward(request, response);
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
